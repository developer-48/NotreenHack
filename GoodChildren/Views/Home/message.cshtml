@model GoodChildren.Models.ChatView

@{
    ViewData["Title"] = "Home Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/css/chat.css">
</head>
<body>
    @{
        string[] HerElement = ViewBag.HerName.Split(' ');
        string[] MyElement = ViewBag.MyName.Split(' ');
        string ActiveElement = "";
    }
    <div class="chat__container ">
        <div class="chat__block d-flex justify-between">
            <div class="chat__header d-flex alighn-center">
                <div class="chat__header-userBlock d-flex justufy-between alighn-center">
                    <div class="chat__header-userIcon d-flex alighn-center">@HerElement[0][0]@HerElement[1][0]</div>
                    <div class="chat__header-userNmae">@ViewBag.HerName</div>
                </div>
            </div>
            <div>
                <div class="chat__messages">
                    @if (ViewBag.Messanges != null)
                    {
                        for (int i = 0; i < ViewBag.Messanges.Count; i++)
                        {
                            if (ViewBag.Messanges[i].SenderId == Model.SenderId)
                            {
                                ActiveElement = MyElement[0][0].ToString() + MyElement[1][0].ToString();
                            }
                            else ActiveElement = HerElement[0][0].ToString() + HerElement[1][0].ToString();
                            DateTime Time = @ViewBag.Messanges[i].LineTime;
                            <div class="chat__message d-flex">
                                <div class="chat__message-userIcon d-flex justufy-between alighn-center ">@ActiveElement</div>
                                <div class="chat__message-block d-flex justify-between alighn-center">
                                    <div class="chat__message-val">
                                        @ViewBag.Messanges[i].ChatLine
                                        <div class="chat__message-time">@Time.ToString("dd.MM hh:mm")</div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="chat__sendBLock d-flex justify-between">
                    <div class="chat__sendfile"><img src="/img/vuesax-linear-paperclip-2.png" alt=""></div>
                    <textarea rows="1" placeholder="Напишите сообщение..." class="chat__message-value"></textarea>
                    <button class="chat__sendMessage"><img src="/img/vuesax-linear-send.png" alt=""></button>
                </div>
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/@@microsoft/signalr@3.1.0/dist/browser/signalr.min.js"></script>
    <script charset="utf-8" type="text/javascript">
let chatId = @Model.chatId;
    let SenderId = @Model.SenderId;
    let SenderName = "@Model.SenderName";
let ReciverId = @Model.ReciverId;
        let ReciverName = "@Model.ReciverName";
        let coinsBtn = document.querySelector(".chat__sendfile");
        coinsBtn.addEventListener("click", () => {
            if (!coinsBtn.classList.contains("active")) {
                coinsBtn.classList.add("active")
                document.querySelector(".chat__message-value").setAttribute("placeholder", "Введите колличество коинов которые хотите отправить...")
            }
            else {
                coinsBtn.classList.remove("active")
                document.querySelector(".chat__message-value").setAttribute("placeholder", "Напишите сообщение...")
            }
        })

const hubConnection = new signalR.HubConnectionBuilder()
    .withUrl("/chat")
    .build();

    async function postServ(data, url) {
        fetch(url, {
            method: "POST",
            body: data
        })
        }

    hubConnection.on("Receive", function (messa, chatId, reciverId, LineTime, userName) {
        console.log(userName, ReciverName )
        if (userName == ReciverName) {
            let coins = document.querySelector(".chat__sendfile");
            addComment(messa, "@HerElement[0][0]@HerElement[1][0]", LineTime, document.querySelector(".chat__messages"), coins.classList.contains("active"), "@MyElement[1]")
            let LookMeseng = new FormData;
            LookMeseng.append("UserId", SenderId);
            LookMeseng.append("ChatId", chatId);
            LookMeseng.append("State", false);
            (!coins.classList.contains("active"))? postServ(LookMeseng, "/Home/LookMesseng"): null;
        }

});

    document.querySelector(".chat__sendMessage").addEventListener("click", function (e) {
        if (document.querySelector(".chat__message-value").value != "") {
            let message = document.querySelector(".chat__message-value").value;
            let to = ReciverName;
            let messa = {
                Id:0,
                ChatId: @Model.chatId,
                SenderId: @Model.SenderId,
                ReciverId: @Model.ReciverId,
                ChatLine: message,
                LineTime: new Date() //`${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`
            }
            let date = new Date()
            date.setHours(date.getUTCHours() + 3)
            let time = `${(date.getDate() < 10) ? `0${date.getDate()}` : date.getDate()}.${(date.getMonth() < 9) ? `0${date.getMonth() + 1}` : date.getMonth() + 1} ${(date.getHours() < 10) ? `0${date.getHours()}` : date.getHours()}:${date.getMinutes()}`
            let coins = document.querySelector(".chat__sendfile");
            addComment(message, "@MyElement[0][0]@MyElement[1][0]", time, document.querySelector(".chat__messages"), coins.classList.contains("active"), "@MyElement[1]")

            const data = new FormData();
            data.append("ChatId", chatId);
            data.append("SenderId", SenderId);
            data.append("ReciverId", ReciverId);
            data.append("ChatLine", message);
            data.append("LineTime", `${date.getDate()}.${date.getMonth() + 1}.${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`);
            (!coins.classList.contains("active")) ? postServ(data, "/Home/message") : null;
            hubConnection.invoke("Send", messa.ChatLine, messa.ChatId, messa.ReciverId, time, to);
            document.querySelector(".chat__message-value").value = ""
        }
});

        let addComment = (message, username, time, comments, coins, name = " ") => {

        let commentElem = document.createElement("div")
            commentElem.classList.add("chat__message");
            if (coins) {
                const CoinesesModel = new FormData();
                CoinesesModel.append("SenderId", @Model.SenderId);
                CoinesesModel.append("RevicerId",@Model.ReciverId);
                CoinesesModel.append("Coinses", message);
                postServ(CoinesesModel, "/Home/Coins")
                commentElem.innerHTML = `
                    <div class="chat__message-userIcon d-flex justufy-between alighn-center ">${username}</div>
                    <div class="chat__message-block coins d-flex justify-between alighn-center">
                        <div class="chat__message-val"> ${name} поделился ${message} монетами!<br>
                            <div class = "d-flex alighn-end">
                                <img src="/img/vuesax-linear-paperclip-2.png" alt="" class="img-coins"> <div class="span-coins">- ${message} монет</div>
                            </div>
                            <div class="chat__message-time coins">${time}</div>
                        </div>
                    </div>
                `
            }
            else {
                commentElem.innerHTML = `
                    <div class="chat__message-userIcon d-flex justufy-between alighn-center ">${username}</div>
                    <div class="chat__message-block d-flex justify-between alighn-center">
                        <div class="chat__message-val"> ${message}
                            <div class="chat__message-time">${time}</div>
                        </div>
                    </div>
                `
            }


        /*let commentElem = document.createElement("div")
        commentElem.classList.add("commentsListElem");
        let comment = document.createElement("div");
        comment.classList.add("commentsListTitle");
        let author = document.createElement("p");
        author.classList.add("commentName");
        author.innerText = username;
        comment.appendChild(author)
        author = document.createElement("p");
        author.innerText = time
        comment.appendChild(author);
        commentElem.appendChild(comment);
        comment = document.createElement("p")
        comment.innerText = message;
        comment.classList.add("commentsText");
        commentElem.appendChild(comment);*/
        comments.appendChild(commentElem);
    }

    const isValid = (str) =>{
    return !/[~`#$\^&\[\]\\';/{}|\\<>]/g.test(str);
}
    hubConnection.start();
    </script>
</body>
</html>
