@model GoodChildren.Models.ChatView

@{
    ViewData["Title"] = "Home Page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="wrap d-flex justify-between bg-img">
        <div class="sidebar">

        </div>
        <div class="chat">
            <div class="chat__header">
                Чат с @Model.ReciverName <span class="collocutorName"></span>
            </div>
            <div class="chat__messages">

            </div>
            <div class="chat__sendingBlock ">
                <textarea name="" cols="30" rows="10" placeholder="Введите сообщение" class="chat__sendingBlock-message"></textarea>
                <br>
                <input type="submit" class="chat__sendingBlock-send" value="Отправить" />
            </div>
        </div>
    </div>
</body>
</html>

<script src="https://unpkg.com/@@microsoft/signalr@3.1.0/dist/browser/signalr.min.js"></script>
<script>

const hubConnection = new signalR.HubConnectionBuilder()
    .withUrl("/chat")
    .build();
// let chatContainer = document.createElement("div");
// commentContainer.classList.add("chatContainer");
let user = {
    username: "Сагариев Юсуп Ибрагимович",
    usernameChat: "Сагариев Юсуп",
    id: "4855",
}
let userRecivier = {
    username: "Бараев Аюб Алиханович",
    usernameChat: "Бараев Аюб",
    id: "2378",
}

    hubConnection.on("Receive", function (message, userName) {
        if (userName == "@Model.ReciverName") {
            let date = new Date()
            let datevalue = { date: `${date.getDate()}.${(date.getMonth() + 1 < 10) ? `0${date.getMonth() + 1}` : date.getMonth() + 1}`, time: `${new Date(01, 11, 2020, date.getUTCHours() + 3).getHours()}:${(date.getUTCMinutes() + 1 < 10) ? `0${date.getUTCMinutes() + 1}` : date.getUTCMinutes() + 1}` };
            addComment(message, userName, datevalue, document.querySelector(".chat__messages"))
        }

});

document.querySelector(".chat__sendingBlock-send").addEventListener("click", function (e) {
    let message = document.querySelector(".chat__sendingBlock-message").value;
    let to = "@Model.ReciverName";
    hubConnection.invoke("Send", message, to);
    let date = new Date()
    let datevalue = {date: `${date.getDate()}.${(date.getMonth() + 1 < 10)? `0${date.getMonth() + 1}`: date.getMonth() + 1}`,   time: `${new Date(01, 11, 2020, date.getUTCHours() + 3).getHours()}:${(date.getUTCMinutes() + 1 < 10)? `0${date.getUTCMinutes() + 1}`: date.getUTCMinutes() + 1}`}
    addComment(message, "@User.Identity.Name", datevalue, document.querySelector(".chat__messages"))
});

let addComment = (message, username, time, comments) =>{
    let commentElem = document.createElement("div")
    commentElem.classList.add("commentsListElem");
    let comment = document.createElement("div");
    comment.classList.add("commentsListTitle");
    let author = document.createElement("p");
    author.classList.add("commentName")
    author.innerText = username;
    comment.appendChild(author)
    author = document.createElement("p");
    let date = new Date();
    author.innerText = `${(time.date == `${date.getDate()}.${(date.getMonth() + 1 < 10)? `0${date.getMonth() + 1}`: date.getMonth() + 1}`)? `Сегодня ${time.time}` :`${time.date} ${time.time}`}`
    comment.appendChild(author);
    commentElem.appendChild(comment);
    comment = document.createElement("p")
    comment.innerText = message;
    comment.classList.add("commentsText");
    commentElem.appendChild(comment);
    comments.appendChild(commentElem);
}

const isValid = (str) =>{
    return !/[~`#$\^&\[\]\\';/{}|\\<>]/g.test(str);
}
    hubConnection.start();
</script>